// Creates the required rules for high density optimized images.
//
// For example:
// .selector {
// 		@include hdpi-img('brand-logo.png');
// }
@mixin hdpi-img($fileName, $width, $height) {
	@if(type-of($fileName) != "string") {
		@warn 'Argument $fileName of hdpi-img() must be a string';
	}

	@if((type-of($width) != "number") or (type-of($height) != "number")) {
		@warn 'Arguments $width and $height of hdpi-img() must be a number';
	}

	background-size: $width/2 $height/2;
	background-image: image-url('#{$fileName}');
}

// Creates a property independent 'rem' calculation with a pixel fallback, default property is set to 'font-size'.
//
// For example:
// .selector {
// 		@include rem($property: font-size, $value: 18);
// }
@mixin rem($property: font-size, $value: 16) {
	#{$property}: $value +px;
	#{$property}: ($value / 16)*1rem;
}

// Creates a fully formed type style (sizing and vertical rhythm) by passing in a single value.
//
// For example:
// .selector {
// 		@include rem($size: 16, $appendVrythm: true);
// }
@mixin font-size($font-size, $appendVrythm: false) {
	@include rem(font-size, $font-size);

	@if $appendVrythm {
		line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
	}
}

// Creates an css arrow as per http://cssarrowplease.com/.
//
// For example:
// .selector:after {
// 		position: absolute;
// 		top: -5px;
// 		left: 50%;
// 		margin-left: -2.5px;
// 		@include cssTriangle(5px, #fff, bottom);
// }
@mixin cssTriangle($triangleSize, $triangleColor, $triangleDirection) {
	@if(not ($triangleDirection == "top") and not ($triangleDirection == "bottom") and not ($triangleDirection == "left") and not ($triangleDirection == "right")) {
		@warn 'Argument $triangleDirection  of cssTriangle() should be either "top", "bottom", "left" or "right" to work appropriately';
	}

	content: "";
	display: block;
	width: 0;
	height: 0;
	border: solid $triangleSize;

	@if ($triangleDirection == "bottom") {
		border-color: $triangleColor transparent transparent transparent;
	}
	@if ($triangleDirection == "top") {
		border-color: transparent transparent $triangleColor transparent;
	}
	@if ($triangleDirection == "right") {
		border-color: transparent transparent transparent $triangleColor;
	}
	@if ($triangleDirection == "left") {
		border-color: transparent $triangleColor transparent transparent;
	}
}
